openapi: 3.0.3
info:
  title: Movie Date Trivia API
  version: v1
# Can be reused all over
components:
  schemas:
    Question:
      type: object
      required:
        - movieId
        - title
        - correctAnswer
        - answers
      properties:
        movieId:
          type: string
          readOnly: true
        title:
          type: string
        correctAnswer:
          type: number
        answers:
          type: array
          items:
            type: number
        nextMovieId:
          type: string
      example:
        movieId: ADEF334978
        title: 'The Avengers'
        correctAnswer: 2012
        answers: [2012, 2014, 2009, 2013]
        nextMovieId: JFDLKJ379
    Stats:
      type: object
      required: 
        - userName
        - totalQuestionsAnswerd
        - correctAnswers
        - incorrectAnswers
        - longestStreak
      properties:
        userName:
          type: string
        totalQuestionsAnswerd:
          type: number
        correctAnswers:
          type: number
        incorrectAnswers: 
          type: number
        longestStreak:
          type: number
      example:
        userName: 'someName'
        totalQuestionsAnswerd: 800
        correctAnswers: 500
        incorrectAnswers: 300
        longestStreak: 50
    Leaderboard:
      type: array
      items:
        $ref: '#/components/schemas/Stats'
    File:
      type: string
      format: byte
    UsernamePass: 
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
      example:
        username: "someUser"
        password: 'somePass'
  parameters:
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
    movieId:
      name: movieId
      in: path
      required: true
      schema:
        type: string
    listId:
      name: listId
      in: path
      required: true
      schema:
        type: string
paths:
  /users:
    x-controller: accounts
    post:
      x-operation: createAccount
      tags:
        - Account
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/UsernamePass'
            # not required      
            example:
              username: movieGuy
              password: supersecret
      responses:
        201: 
          description: User created
          content: 
            application/json:
              schema:
                type: object
                properties: 
                  username:
                    type: string
                  _id:
                    type: string
          headers: 
            Location:
              schema:
                type: string
        400:
          description: Invalid request
    
  /users/{userId}:
    x-controller: accounts
    delete:
      x-operation: deleteAccount
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/userId'
      summary: Delete user
      responses:
        204:
          description: User deleted
        401:
          description: Not authenticated
    put:
      x-operation: updateAccount
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/userId'
      summary: Update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: User updated
          content: 
            application/json:
              schema:
                type: object
                required: 
                  - username
                  - userId
                properties: 
                  username:
                    type: string
                  userId:
                    type: string
        401:
          description: Not authenticated
        403:
          description: Access Denied


  /users/login:
    x-controller: accounts
    put:
      x-operation: login
      tags:
        - Account
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/UsernamePass'
      responses:
        200:
          description: Authenticated
        400:
          description: Invalid request
          
  /users/logout/{userId}:
    x-controller: accounts
    put:
      x-operation: logout
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/userId'
      summary: Logout user
      responses:
        200:
          description: User logged out
        403:
          description: Access denied
  
  /questions:
    x-controller: generalGame
    get:
      x-operation: getQuestion
      tags:
        - General Game
      summary: Get question
      responses:
        200:
          description: ok
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/Question'
        401:
          description: Not authenticated
        403:
          description: Access denied
        404: 
          description: Not found

  /questions/{userId}/movies/{movieId}:
    x-controller: generalGame
    put:
      x-operation: answerQuestion
      tags:
        - General Game
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/movieId'
      summary: Answer question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - answer
                - correctAnswer
              properties:
                answer:
                  type: number
                correctAnswer:
                  type: number
            # not required      
            example:
              answer: 2012
              correctAnswer: 2013
      responses:
        200:
          description: Response Recorded
        400:
          description: Invalid request
        401:
          description: Not authenticated
        403:
          description: Access denied
        404: 
          description: Not found
  /stats/{userId}:
    x-controller: generalGame
    get:
      x-operation: getPersonalStats
      tags: 
        - Game Statistics
      parameters:
        - $ref: '#/components/parameters/userId'
      summary: Get personal stats
      responses:
        200: 
          description: ok
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'
        401:
          description: Not authenticated
        403:
          description: Access denied
        404: 
          description: Not found
  /stats:
    x-controller: generalGame
    get:
      x-operation: getLeaderboard
      tags: 
        - Game Statistics
      summary: Get leaderboard stats
      responses:
        200: 
          description: ok
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Leaderboard'
        401:
          description: Not authenticated
        403:
          description: Access denied
        404: 
          description: Not found
          
  /lists/users/{userId}:
    x-controller: lists
    post:
      x-operation: uploadList
      tags: 
        - Lists
      parameters:
        - $ref: '#/components/parameters/userId'
      summary: Upload movie list csv file 
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - public
              properties:
                name:
                  type: string
                public:
                  type: boolean
                csv: 
                  $ref: '#/components/schemas/File'
            example:
              name: 'List Name'
              public: true
      responses:
        201: 
          description: List Created
          content: 
            application/json:
              schema:
                type: object
                required: 
                  - name
                  - listId
                  - public
                properties: 
                  name:
                    type: string
                  listId:
                    type: string
                  public:
                    type: boolean
          headers: 
            Location:
              schema:
                type: string
        400:
          description: Invalid request
        401:
          description: Not authenticated
        403:
          description: Access denied
          
  /lists/{listId}:
    x-controller: lists
    put:
      x-operation: updateList
      tags: 
        - Lists
      parameters:
        - $ref: '#/components/parameters/listId'
      summary: Update movie list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                public:
                  type: boolean
            example:
              name: 'List Name'
              public: false
      responses:
        200: 
          description: List Updated
        400:
          description: Invalid request
        401:
          description: Not authenticated
        403:
          description: Access denied
        404: 
          description: Not found
    delete:
      x-operation: deleteList
      tags: 
        - Lists
      parameters:
        - $ref: '#/components/parameters/listId'
      summary: Delete movie list
      responses:
        204: 
          description: List Deleted
        401:
          description: Not authenticated
        403:
          description: Access denied
  /lists/questions/{listId}:
    x-controller: lists
    get:
      x-operation: startMovieList
      tags: 
        - Lists
      parameters:
         - $ref: '#/components/parameters/listId'
      summary: Start movie list game
      responses:
        200:
          description: ok
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/Question'
        401:
          description: Not authenticated
        404: 
          description: Not found
        403:
          description: Access denied
    put:
      x-operation: answerListQuestion
      tags: 
        - Lists
      parameters:
        - $ref: '#/components/parameters/listId'
      summary: Answer movie list question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nextMovieId
                - answer
                - correctAnswer
              properties:
                nextMovieId:
                  type: string
                answer:
                  type: number
                correctAnswer:
                  type: number
            example:
              nextMovieId: JFDLKJ379
              answer: 2014
              correctAnswer: 2015
      responses:
        200:
          description: ok
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/Question'
        400:
          description: Invalid request
        401:
          description: Not authenticated
        403:
          description: Access denied
  /lists:
    x-controller: lists
    get:
      x-operation: getPublicLists
      tags:
        - Lists
      summary: get public movie lists
      responses:
        200:
          description: ok
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    listId:
                      type: string
                    name:
                      type: string
        400:
          description: Invalid request
        401:
          description: Not authenticated
        404: 
          description: Not found
                          
        
    
      
        
          
  
            
            
        
    
      
      
  